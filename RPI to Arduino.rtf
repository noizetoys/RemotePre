{\rtf1\ansi\ansicpg1252\cocoartf2759
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww14220\viewh20620\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs36 \cf0 To connect an Arduino Uno to a Raspberry Pi 2 using I2C, you'll need to follow several steps, including wiring the two devices properly and writing code for both devices. The Raspberry Pi 2, like its successors, includes I2C functionality that can be utilized to communicate with an Arduino Uno.\
\
### Wiring\
\
You will need four connections between the Arduino Uno and the Raspberry Pi 2:\
\
1. **SDA (Serial Data Line)**: Connect the SDA pin on the Arduino (A4) to the SDA pin on the Raspberry Pi 2 (GPIO 2, Pin 3).\
2. **SCL (Serial Clock Line)**: Connect the SCL pin on the Arduino (A5) to the SCL pin on the Raspberry Pi 2 (GPIO 3, Pin 5).\
3. **GND (Ground)**: Connect a GND pin on the Arduino to a GND pin on the Raspberry Pi 2 (e.g., Pin 6).\
4. **Power (Optional)**: If you want the Raspberry Pi to power the Arduino, connect the 5V pin on the Raspberry Pi 2 (Pin 2 or 4) to the 5V pin on the Arduino. Otherwise, power the Arduino separately.\
\
Ensure you use appropriate resistors if needed and be cautious with the connections to avoid damaging either device.\
\
### Software Setup\
\
#### Raspberry Pi 2 Setup\
\
1. **Enable I2C Interface**: Use `raspi-config` to enable the I2C interface on your Raspberry Pi 2.\
   - Run `sudo raspi-config`\
   - Navigate to "Interfacing Options"\
   - Enable I2C\
\
2. **Install I2C Tools and Python Library**:\
   ```bash\
   sudo apt-get update\
   sudo apt-get install -y i2c-tools python3-smbus\
   ```\
\
3. **Detect Connected I2C Devices**: Use `i2cdetect -y 1` to ensure the Arduino is detected. The Arduino should appear at an address on the grid.\
\
#### Raspberry Pi 2 Python Code\
\
Install the necessary Python libraries if you haven't already:\
\
```bash\
pip3 install smbus2\
```\
\
Example Python code to communicate with the Arduino:\
\
```python\
import smbus2\
import time\
\
bus = smbus2.SMBus(1)  # 1 indicates /dev/i2c-1\
arduino_address = 0x04  # Replace 0x04 with your Arduino's I2C address\
\
def write_number(value):\
    bus.write_byte(arduino_address, value)\
    return -1\
\
def read_number():\
    number = bus.read_byte(arduino_address)\
    return number\
\
write_number(1)\
print("Arduino response:", read_number())\
```\
\
#### Arduino Uno Setup and Code\
\
Make sure your Arduino IDE is set up to program the Arduino Uno. Use the `Wire` library to facilitate I2C communication.\
\
Example Arduino code to communicate as an I2C slave:\
\
```cpp\
#include <Wire.h>\
\
void setup() \{\
  Wire.begin(0x04);  // Join I2C bus with address #4\
  Wire.onReceive(receiveEvent);  // Register event for receiving data\
  Wire.onRequest(requestEvent);  // Register event for sending data\
  Serial.begin(9600);  // Start serial for debugging\
\}\
\
void loop() \{\
  delay(100);\
\}\
\
// Function to execute when data is received from master\
void receiveEvent(int howMany) \{\
  while (1 < Wire.available()) \{  // Loop through all received data\
    char c = Wire.read();  // Receive byte as a character\
    Serial.print(c);  // Print the character\
  \}\
  int x = Wire.read();  // Receive byte as an integer\
  Serial.println(x);  // Print the integer\
\}\
\
// Function to execute when data is requested by master\
void requestEvent() \{\
  Wire.write("hello ");  // Respond with message of 6 bytes\
  // Use Wire.write() to send data back to master\
\}\
```\
\
### Testing the Connection\
\
After uploading the code to both the Arduino Uno and the Raspberry Pi 2, you should be able to send and receive data between the two. Use the serial monitor in the Arduino IDE to view any messages sent from the Raspberry Pi, and similarly, print out received messages in your Python script to verify communication.\
\
This setup allows for basic I2C communication. Depending on your project, you might need to adapt the code for more complex data handling.}